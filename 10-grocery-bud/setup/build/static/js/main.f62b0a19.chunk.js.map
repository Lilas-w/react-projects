{"version":3,"sources":["List.js","Alert.js","App.js","index.js"],"names":["List","items","removeItem","editItem","className","map","item","id","title","key","type","onClick","Alert","msg","removeAlert","list","useEffect","timeout","setTimeout","clearTimeout","App","useState","name","setName","localStorage","getItem","JSON","parse","setList","isEditing","setIsEditing","editID","setEditID","show","alert","setAlert","showAlert","setItem","stringify","onSubmit","e","preventDefault","newItem","Date","getTime","toString","placeholder","value","onChange","target","length","filter","specificItem","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAuCeA,EArCF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACjC,OACE,yBAAKC,UAAU,gBACZH,EAAMI,KAAI,SAACC,GAAS,IAEXC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACZ,OACE,6BAASC,IAAKF,EAAIH,UAAU,gBAC1B,uBAAGA,UAAU,SAASI,GACtB,yBAAKJ,UAAU,iBAEb,4BACEM,KAAK,SACLN,UAAU,WAEVO,QAAS,kBAAMR,EAASI,KAExB,kBAAC,IAAD,OAGF,4BACEG,KAAK,SACLN,UAAU,aAEVO,QAAS,kBAAMT,EAAWK,KAE1B,kBAAC,IAAD,cCXDK,EAfD,SAAC,GAAsC,IAApCF,EAAmC,EAAnCA,KAAMG,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAYvC,OAVAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WAEzBJ,MACC,KACH,OAAO,kBAAMK,aAAaF,MAGzB,CAACF,IAEI,uBAAGX,UAAS,sBAAiBM,IAASG,ICmHjCO,MAnHf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAGWF,mBAXbG,aAAaC,QAAQ,QAEvBC,KAAKC,MAAMH,aAAaC,QAAQ,SAEhC,IAII,mBAGNV,EAHM,KAGAa,EAHA,OAIqBP,oBAAS,GAJ9B,mBAINQ,EAJM,KAIKC,EAJL,OAKeT,mBAAS,MALxB,mBAKNU,EALM,KAKEC,EALF,OAOaX,mBAAS,CACjCY,MAAM,EACNpB,IAAK,GACLH,KAAM,KAVK,mBAONwB,EAPM,KAOCC,EAPD,KAgDPC,EAAY,WAAwC,IAAvCH,EAAsC,wDAAxBvB,EAAwB,uDAAjB,GAAIG,EAAa,uDAAP,GAChDsB,EAAS,CAAEF,OAAMvB,OAAMG,SAiCzB,OALAG,qBAAU,WAERQ,aAAaa,QAAQ,OAAQX,KAAKY,UAAUvB,GAAO,CAACA,OAIpD,6BAASX,UAAU,kBACjB,0BAAMA,UAAU,eAAemC,SAvEd,SAACC,GAEpB,GADAA,EAAEC,iBACGnB,EAIE,GAAIA,GAAQO,EAEjBD,EAAQb,EAAKV,KAAI,SAACC,GAChB,OAAIA,EAAKC,KAAOwB,EAEP,2BAAKzB,GAAZ,IAAkBE,MAAOc,IAGpBhB,MAGTiB,EAAQ,IACRS,EAAU,MACVF,GAAa,GAEbM,GAAU,EAAM,UAAW,qBACtB,CAGLA,GAAU,EAAM,UAAW,0BAE3B,IAAMM,EAAU,CAAEnC,IAAI,IAAIoC,MAAOC,UAAUC,WAAYrC,MAAOc,GAC9DM,EAAQ,GAAD,mBAAKb,GAAL,CAAW2B,KAElBnB,EAAQ,SAzBRa,GAAU,EAAM,SAAU,wBAoEvBF,EAAMD,MAAQ,kBAAC,EAAD,iBAAWC,EAAX,CAAkBpB,YAAasB,EAAWrB,KAAMA,KAC/D,2CACA,yBAAKX,UAAU,gBACb,2BACEM,KAAK,OACLN,UAAU,UACV0C,YAAY,YACZC,MAAOzB,EACP0B,SAAU,SAACR,GAAD,OAAOjB,EAAQiB,EAAES,OAAOF,UAEpC,4BAAQrC,KAAK,SAASN,UAAU,cAC7ByB,EAAY,OAAS,YAK3Bd,EAAKmC,OAAS,GACb,yBAAK9C,UAAU,qBAEb,kBAAC,EAAD,CAAMH,MAAOc,EAAMb,WA5CR,SAACK,GAClB6B,GAAU,EAAM,SAAU,gBAE1BR,EAAQb,EAAKoC,QAAO,SAAC7C,GAAD,OAAUA,EAAKC,KAAOA,OAyCOJ,SAtClC,SAACI,GAEhB,IAAM6C,EAAerC,EAAKsC,MAAK,SAAC/C,GAAD,OAAUA,EAAKC,KAAOA,KACrDuB,GAAa,GACbE,EAAUzB,GAEVgB,EAAQ6B,EAAa5C,UAiCf,4BAAQJ,UAAU,YAAYO,QAtDpB,WAEhByB,GAAU,EAAM,SAAU,cAE1BR,EAAQ,MAkDF,kBCnHV0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f62b0a19.chunk.js","sourcesContent":["import React from 'react'\nimport { FaEdit, FaTrash } from 'react-icons/fa'\nconst List = ({ items, removeItem, editItem }) => {\n  return (\n    <div className='grocery-list'>\n      {items.map((item) => {\n        //使用解构赋值获取list属性\n        const { id, title } = item;\n        return (\n          <article key={id} className='grocery-item'>\n            <p className='title'>{title}</p>\n            <div className='btn-container'>\n              {/* 用于编辑的按钮 */}\n              <button\n                type='button'\n                className='edit-btn'\n                //点击后获取特定item的id，传给editItem函数\n                onClick={() => editItem(id)}\n              >\n                <FaEdit />\n                {/* 用于删除的按钮 */}\n              </button>\n              <button\n                type='button'\n                className='delete-btn'\n                //点击后获取特定item的id，传给removeItem函数\n                onClick={() => removeItem(id)}\n              >\n                <FaTrash />\n              </button>\n              {/* 有两个按钮后，就可以在App.js中使用条件渲染了*/}\n            </div>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default List\n","import React, { useEffect } from 'react'\n\nconst Alert = ({ type, msg, removeAlert, list }) => {\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      //removeAlert = 默认参数的showAlert(默认show = false)\n      removeAlert();\n    }, 3000)\n    return () => clearTimeout(timeout);\n    //如果第二个参数是空数组，则timeout副作用函数只会在组件挂载时执行一次\n    //如果第二个参数是[list]，则timeout副作用函数会在每次list改变时执行\n  }, [list])\n  //显示信息的样式取决于type类型\n  return (<p className={`alert alert-${type}`}>{msg}</p>)\n}\n\nexport default Alert\n","import React, { useState, useEffect } from 'react'\nimport List from './List'\nimport Alert from './Alert'\n\nconst getLocalStorage = () => {\n  //key='list'\n  let list = localStorage.getItem('list');\n  if (list) {\n    return JSON.parse(localStorage.getItem('list'));\n  } else {\n    return [];\n  }\n}\n\nfunction App() {\n  const [name, setName] = useState('');\n  //list用于本地存储\n  const [list, setList] = useState(getLocalStorage());\n  const [isEditing, setIsEditing] = useState(false);\n  const [editID, setEditID] = useState(null);\n  //点击编辑或删除按钮时，显示信息\n  const [alert, setAlert] = useState({\n    show: false,\n    msg: '',\n    type: ''\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!name) {\n      //值为空的时候，页面弹出警示信息\n      //因为需要多次使用setAlert，所以定义showAlert函数以使用setAlert\n      showAlert(true, 'danger', 'please enter value');\n    } else if (name && isEditing) {\n      //值不为空且正在编辑\n      setList(list.map((item) => {\n        if (item.id === editID) {\n          //是editID，复制item，修改title值为name\n          return { ...item, title: name }\n        }\n        //并非editID，原样返回item\n        return item;\n      }))\n      //恢复初始值\n      setName('');\n      setEditID(null);\n      setIsEditing(false);\n      //显示修改的信息\n      showAlert(true, 'success', 'value changed');\n    } else {\n      //等待新添加的值不为空，将值加入List中\n      //显示成功信息\n      showAlert(true, 'success', 'item added to the list');\n      //因为前面的条件判断，此时值一定有内容，创建newItem，加入list中；因为有list,所以需要id\n      const newItem = { id: new Date().getTime().toString(), title: name };\n      setList([...list, newItem]);\n      //最后将name恢复为空字符串\n      setName('');\n    }\n  }\n\n  //创建一个showAlert函数以改变Alert的值\n  const showAlert = (show = false, type = '', msg = '') => {\n    setAlert({ show, type, msg })\n  }\n  //创建一个clearList函数以清除全部值\n  const clearList = () => {\n    //显示清除list的信息\n    showAlert(true, 'danger', 'empty list');\n    //清除list值\n    setList([]);\n  }\n\n  //在List组件中使用\n  //创建一个removeItem函数以删除单个item\n  const removeItem = (id) => {\n    showAlert(true, 'danger', 'item removed');\n    //当item的id和选择的id匹配，则让其不再存在于list中\n    setList(list.filter((item) => item.id !== id))\n  }\n\n  const editItem = (id) => {\n    //返回与选中的item id匹配的item\n    const specificItem = list.find((item) => item.id === id);\n    setIsEditing(true);\n    setEditID(id);\n    //显示该item于输入框中\n    setName(specificItem.title);\n  }\n\n  //只读的window.localStorage 属性允许你访问一个Document 源（origin）的对象 Storage\n  useEffect(() => {\n    //每次list改变，存储新值；但只写这个，每次刷新页面时[]重新为空\n    localStorage.setItem('list', JSON.stringify(list), [list])\n  })\n\n  return (\n    <section className='section-center'>\n      <form className='grocery-form' onSubmit={handleSubmit}>\n        {/* 向Alert组件传递alert的所有属性,然后在alert组件中构建。传递list状态值以设置useEffect第二个参数 */}\n        {alert.show && <Alert {...alert} removeAlert={showAlert} list={list} />}\n        <h3>grocery bud</h3>\n        <div className='form-control'>\n          <input\n            type='text'\n            className='grocery'\n            placeholder='e.g. eggs'    //placeholder不起作用？\n            value={name}\n            onChange={(e) => setName(e.target.value)} />\n          {/* 如果是在编辑，按钮文字显示未edit，否则显示submit */}\n          <button type='submit' className='submit-btn'>\n            {isEditing ? 'edit' : 'submit'}\n          </button>\n        </div>\n      </form>\n      { /* 当有第一个item时，就可以看到List组件中的编辑、删除按钮 */}\n      {list.length > 0 && (\n        <div className='grocery-container'>\n          {/* 给List组件传入list state ,传入removeItem editItem函数。在List组件中构建*/}\n          <List items={list} removeItem={removeItem} editItem={editItem} />\n          <button className='clear-btn' onClick={clearList}>\n            clear items\n          </button>\n        </div>\n      )}\n    </section>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}